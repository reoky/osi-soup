#!/usr/bin/python3

# Base Modules
import os, io, sys, time, re, code, shutil

# Extended Modules
import yaml
import urllib3
from bs4 import BeautifulSoup
from django.core.validators import URLValidator
from django.core.exceptions import ValidationError

##########################################################################
# OSI SOUP: Collect -> Harvest -> Record                         # reoky #
##########################################################################
# OSI Soup can be used to locate data which may have been inadvertantly  #
# posted on a website. This open source information is 'open', because   #
# it's already publically facing, and likely being indexed by search     #
# engines.                                                               #
#                                                                        #
# This tool is MIT License software, and it's free, specifically created #
# to bring value to organizations looking to improve their resiliance to #
# common hacking techniques.                                             #
##########################################################################

# SoupConfig: Handles loading configuration values from the disk
class SoupConfig:

    # Configuration Dictionary
    config = {
        "name":"",
        "target":"",
        "collect":"",
        "paranoid":True,
        "robots":True
    }

    def __init__(self, name, config=None):
        self.name = name
        self.config = config

        # I dun even have a name.. How can I computer program?
        if not name:
            exit()

        # We are going to write a new config from these params
        if (config):
            try:
                with open(soupDir + "/config/" + self.name, "w") as cf:
                    yaml.dump(config, cf, default_flow_style=False)
                    print("[osi-soup] - SoupConfig saved a new profile which can be run with \"osi-soup run " + self.name + "\"")
            except Exception as e:
                print("[osi-soup] - I couldn't load the config file: " + soupDir + "/config/" + self.name)
                print("[osi-soup] - Error:" + e)
            return

        # We are going to open an existing config file
        try:
            with open(soupDir + "/config/" + name, "r") as configFile:
                config = yaml.load(configFile)
        except:
            print("[osi-soup] - Error: No profile matching that name was found")
            exit()

# SoupRecorder: Handles logging and report writing
class SoupRecorder:
    config = ""
    logFile = ""
    reportFile = ""

    def __init__(self, config):
        if not config:
            print("[osi-soup] - Configuration bundle was empty {}")
            exit()
        self.config = config
        self.log("SoupRecorder is ready to log whatever happens")
        print("[osi-soup] - SoupRecorder is ready to log whatever happens")

    # Report CSV: ex ("Found SSN", "index.html", "242-2561-141412"
    def record(self, msg, location, value):
        with open(soupDir + "/data/" + self.config.config.name + "/report.csv", "wt") as reportFile:
            reportFile.write(location + "," + msg + "," + value + "\n")
        return

    # Log Text
    def log(self, msg):
        with open(soupDir + "/log/" + self.config.config.name, "wt") as logFile:
            logFile.write("[" + str(int(time.time())) + "] " + msg + "\n")
            print("[" + str(int(time.time())) + "] " + msg)

class SoupHarvest:
    target = ""        # The initial page
    pool = []          # Thread pool where our threads will be kept
    queue = []         # Link queue where discovered links go
    robots = True      # Should we obey robots.txt disallow entries?
    paranoia = False   # osi-soup can go slowly introducing random delays

    # Constructor
    def __init__(self, target, paranoia, robots):
        self.target = target
        self.paranoia = paranoia
        self.robots = robots
        print("[osi-soup] - SoupHarvest module is ready to chomp data")

        while True:
            self.scrape(this.target)
            if (paranoia):
                sleep(random().randint(1, 10))
            print("[osi-soup] - Iterator")


    # The crawler found a file that can be downloaded
    # and so it shall be placed in data as well
    def download(url):
        # Download file

        # Checksum file

        # Add file to report
        return

    # Method/thread which scrapes a single page and
    # records all the interesting stuff
    # returns: list of discovered URLs
    def scrape(target):
        result = []

        # Pull webpage with bs4

        # Harvest from the data

        # Append discovered URLs from harvest to the crawl queue
        result.append("https://www.duckduckgo.com/")

        return result

    # 
    def harvest(content):
        print("[osi-soup] - Did some interesting stuff to the HTML of a page..")
            

# What we show the user when shit breaks
def printUsage():
    print("\nosi-soup can crawl a website for interesting data..\n")
    print("Usage:")
    print("----------------------------")
    print("ex: ./osi-soup run <profile>")
    print("    ./osi-soup make <profile>")
    print("    ./osi-soup purge <profile>")
    print("    ./osi-soup show <profile>")
    print("    ./osi-soup list")
    print("    ./osi-soup install")
    print("    ./osi-soup uninstall")


# Determine if a URL is valid or not
def validateURL(url):
    if re.match("^(http|https){1}:\/\/", url):
        return True
    return False

# Build a yaml config for a new profile so that
# the user doesn't have to
def makeProfile(name):
    target = ""
    collect = ""
    robots = ""
    paranoid = ""

    while not validateURL(target):
        target = input("Enter a web domain for this profile: ")

    while not collect:
        collect = input("Enter comma-delimited file extensions to download (ex: pdf,exe,doc): ")

    while not (robots == "y" or robots == "n"):
        robots = input("Do we care about obeying robots.txt? [y/n]: ")

    while not (paranoid == "y" or paranoid == "n"):
        paranoid = input("Turn paranoia-mode on?(random delays/slow execution) [y/n]: ")

    # Configuration Dictionary
    config = {
        "target": target,
        "collect": collect,
        "paranoid": True if paranoid == "y" else False,
        "robots": True if robots == "y" else False
    }

    # Save a new config
    SoupConfig(name, config)

def runProfile(name):
    print("[osi-soup] - Running profile: " + name)
    config = SoupConfig(name)
    recorder = SoupRecorder(config)
    harvest = SoupHarvest(
        config.target,
        config.paranoia,
        config.robots
    )
    recorder.log("Alright, initializing BS4 library")

    # target, paranoia, robots


def listProfiles():
    profiles = os.listdir(soupDir + "/config")
    print("\nosi-soup profiles")
    print("-----------------")
    for profile in profiles:
        print(profile)

def install():
    install = ""
    print("[osi-soup] - Performing an install will copy osi-soup to your /bin directory.")
    if (os.geteuid() == 0):
        print("[osi-soup] - Got root permission for install")
        while not install:
            install = input("Do you wish to install osi-soup? [y/n]: ")
        if (install == "y"):
            print("[osi-soup] - Alright man, I'm doin it..")
            shutil.copyfile(sys.argv[0], "/bin/osi-soup")
            print("copied " + sys.argv[0] + " to /bin/osi-soup")
            os.chmod("/bin/osi-soup", 493) # chmod 755 osi-soup
            print("set permissions on /bin/osi-soup to 755")
            os.chown("/bin/osi-soup", 0, 0) # chown root:root osi-soup
    else:
        print("You need to have root permissions. Try 'sudo !!'")

def uninstall():
    print("[osi-soup] - Removing osi-soup script at /bin/osi-soup")
    if os.path.isfile("/bin/osi-soup"):
        os.remove("/bin/osi-soup")
        print("[osi-soup] - Found and removed the file")
        exit()
    print("[osi-soup] - Couldn't find anything to uninstall...")


### OSI SOUP ###
###   MAIN   ###
soupDir = os.path.expanduser('~') + "/osi-soup"
if not os.path.exists(soupDir):
    os.makedirs(soupDir)

if not os.path.exists(soupDir + "/data"):
    os.makedirs(soupDir + "/data")
if not os.path.exists(soupDir + "/config"):
    os.makedirs(soupDir + "/config")
if not os.path.exists(soupDir + "/log"):
    os.makedirs(soupDir + "/log")

if (len(sys.argv) <= 2):
    if (len(sys.argv) > 1): 

        # User supplied either of these args with no other args
        if (sys.argv[1] == "list"):
            listProfiles()
            exit()
        if (sys.argv[1] == "install"):
            install()
            exit()
        if (sys.argv[1] == "uninstall"):
            uninstall()
            exit()

    print("[osi-soup] - Not enough arguments supplied")
    printUsage()
    exit()

name = sys.argv[len(sys.argv)-1]

if not re.match("^(\w|-)+$", name):
    print("[osi-soup] - Name is not a-zA-Z0-9 or '-'")
    exit()

for arg in sys.argv:

    # We think that the user wants to create a new profile
    if (arg == "make" or arg == "add" or arg == "create"):
        if (os.path.isfile(soupDir + "/config/" + name)):
            print("[osi-soup] - The profile \"" + name + "\" already exists. This wizard will eventually overwrite it..")
        makeProfile(name)
        exit()

    # The user is trying to run a profile
    if (arg == "run" or arg == "exec" or arg == "start"):
        if (os.path.isfile(soupDir + "/config/" + name)):
            runProfile(name)
            exit()
        print("[osi-soup] - The profile doesn't exist: " + name)
        exit()

    # The user wants to remove a profile
    if (arg == "purge" or arg == "remove" or arg == "del" or arg == "rm"):
        if (os.path.isfile(soupDir + "/config/" + name)):
            print("[osi-soup] - Removing the profile: " + name)
            os.remove(soupDir + "/config/" + name)
            exit()
        print("[osi-soup] - No such profile: " + name)
        exit()

    # The user typed "list" or "install" but there were more args after that...
    if (arg == "list"):
        listProfiles()
        exit()
    if (arg == "install"):
        install()
        exit()
    if (arg == "uninstall"):
        uninstall()
        exit()

    # Display the contents of one of the profile configs
    if (arg == "show" or arg == "display"):
        with open(soupDir + "/config/" + name, "rt") as cf:
            cf = cf.read()
            print(cf)
            exit()
printUsage()
